How to set up a web portal.



1. If necessary, in Specify, create an Export Mapping.


2. Open the Exporter application. If necessary build or update the cache for the portal mapping. Then click the 'Export for Web Portal' button. When prompted, choose a directory (preferably empty) to hold the generated files. The app will index the contents of the cache for the selected mapping and generate config files for Solr and the webportal app.


3. Set up Solr: (for solr-4.2.1!!!)


    a) locate the example directory. e.g solr-4.2.1/example

    b) remove all files from example/solr/collection1/data/index

    c) copy the files in the Solr directory generated in step 2 to example/solr/collection1/data/index

    d) open the file example/solr/collection1/conf/schema.xml and replace the fields in the <fields> block with the contents of the file SolrFldSchema.xml generated in step 2. Leave the <dynamicField> definition in the schema.xml file.

    e) in the schema.xml file of step d, change the line <uniqueKey>id</uniqueKey> to <uniqueKey>spid</uniqueKey>.

    f) Also, in the schema.xml file comment out the following "copyField" definitions:

           Change <copyField source="price" dest="price_c"/>  to <!--<copyField source="price" dest="price_c"/>-->

           Change <copyField source="title" dest="text"/> to <!--<copyField source="title" dest="text"/>-->

           Change <copyField source="url" dest="text"/> to <!--<copyField source="url" dest="text"/>-->

           Change <copyField source="author" dest="author_s"/> to <!--<copyField source="author" dest="author_s"/>-->

    g) Make the following changes to the file example/solr/collection1/conf/solrconfig:

  <requestHandler name="/select" class="solr.SearchHandler">
    <!-- default values for query parameters can be specified, these
         will be overridden by parameters in the request
      -->
     <lst name="defaults">
       <str name="echoParams">explicit</str>
       <int name="rows">10</int>
       <str name="df">text</str>
     </lst>

* change <str name="df">text</str> to str name="df">cs</str> in the block above.



* comment out the updatehandler:

  <updateHandler class="solr.DirectUpdateHandler2">

    <!-- Enables a transaction log, used for real-time get, durability, and
         and Solr cloud replica recovery.  The log can grow as big as
         uncommitted changes to the index, so use of a hard autoCommit
         is recommended (see below).
         "dir" - the target directory for transaction logs, defaults to the
                solr data directory.  -->
    <updateLog>
      <str name="dir">${solr.ulog.dir:}</str>
    </updateLog>

    <!-- AutoCommit

         Perform a hard commit automatically under certain conditions.
         Instead of enabling autoCommit, consider using "commitWithin"
         when adding documents.

         http://wiki.apache.org/solr/UpdateXmlMessages

         maxDocs - Maximum number of documents to add since the last
                   commit before automatically triggering a new commit.

         maxTime - Maximum amount of time in ms that is allowed to pass
                   since a document was added before automatically
                   triggering a new commit.
         openSearcher - if false, the commit causes recent index changes
           to be flushed to stable storage, but does not cause a new
           searcher to be opened to make those changes visible.

         If the updateLog is enabled, then it's highly recommended to
         have some sort of hard autoCommit to limit the log size.
      -->
     <autoCommit>
       <maxTime>15000</maxTime>
       <openSearcher>false</openSearcher>
     </autoCommit>

    <!-- softAutoCommit is like autoCommit except it causes a
         'soft' commit which only ensures that changes are visible
         but does not ensure that data is synced to disk.  This is
         faster and more near real-time friendly than a hard commit.
      -->
     <!--
       <autoSoftCommit>
         <maxTime>1000</maxTime>
       </autoSoftCommit>
      -->

    <!-- Update Related Event Listeners

         Various IndexWriter related events can trigger Listeners to
         take actions.

         postCommit - fired after every commit or optimize command
         postOptimize - fired after every optimize command
      -->
    <!-- The RunExecutableListener executes an external command from a
         hook such as postCommit or postOptimize.

         exe - the name of the executable to run
         dir - dir to use as the current working directory. (default=".")
         wait - the calling thread waits until the executable returns.
                (default="true")
         args - the arguments to pass to the program.  (default is none)
         env - environment variables to set.  (default is none)
      -->
    <!-- This example shows how RunExecutableListener could be used
         with the script based replication...
         http://wiki.apache.org/solr/CollectionDistribution
      -->
    <!--
       <listener event="postCommit" class="solr.RunExecutableListener">
         <str name="exe">solr/bin/snapshooter</str>
         <str name="dir">.</str>
         <bool name="wait">true</bool>
         <arr name="args"> <str>arg1</str> <str>arg2</str> </arr>
         <arr name="env"> <str>MYVAR=val1</str> </arr>
       </listener>
      -->

  </updateHandler>


should look like this:



  <!--<updateHandler class="solr.DirectUpdateHandler2">-->

    <!-- Enables a transaction log, used for real-time get, durability, and
         and Solr cloud replica recovery.  The log can grow as big as
         uncommitted changes to the index, so use of a hard autoCommit
         is recommended (see below).
         "dir" - the target directory for transaction logs, defaults to the
                solr data directory.  -->
    <!--<updateLog>
      <str name="dir">${solr.ulog.dir:}</str>
    </updateLog>-->

    <!-- AutoCommit

         Perform a hard commit automatically under certain conditions.
         Instead of enabling autoCommit, consider using "commitWithin"
         when adding documents.

         http://wiki.apache.org/solr/UpdateXmlMessages

         maxDocs - Maximum number of documents to add since the last
                   commit before automatically triggering a new commit.

         maxTime - Maximum amount of time in ms that is allowed to pass
                   since a document was added before automatically
                   triggering a new commit.
         openSearcher - if false, the commit causes recent index changes
           to be flushed to stable storage, but does not cause a new
           searcher to be opened to make those changes visible.

         If the updateLog is enabled, then it's highly recommended to
         have some sort of hard autoCommit to limit the log size.
      -->
     <!--
     <autoCommit>
       <maxTime>15000</maxTime>
       <openSearcher>false</openSearcher>
     </autoCommit>
    -->
    <!-- softAutoCommit is like autoCommit except it causes a
         'soft' commit which only ensures that changes are visible
         but does not ensure that data is synced to disk.  This is
         faster and more near real-time friendly than a hard commit.
      -->
     <!--
       <autoSoftCommit>
         <maxTime>1000</maxTime>
       </autoSoftCommit>
      -->

    <!-- Update Related Event Listeners

         Various IndexWriter related events can trigger Listeners to
         take actions.

         postCommit - fired after every commit or optimize command
         postOptimize - fired after every optimize command
      -->
    <!-- The RunExecutableListener executes an external command from a
         hook such as postCommit or postOptimize.

         exe - the name of the executable to run
         dir - dir to use as the current working directory. (default=".")
         wait - the calling thread waits until the executable returns.
                (default="true")
         args - the arguments to pass to the program.  (default is none)
         env - environment variables to set.  (default is none)
      -->
    <!-- This example shows how RunExecutableListener could be used
         with the script based replication...
         http://wiki.apache.org/solr/CollectionDistribution
      -->
    <!--
       <listener event="postCommit" class="solr.RunExecutableListener">
         <str name="exe">solr/bin/snapshooter</str>
         <str name="dir">.</str>
         <bool name="wait">true</bool>
         <arr name="args"> <str>arg1</str> <str>arg2</str> </arr>
         <arr name="env"> <str>MYVAR=val1</str> </arr>
       </listener>
      -->

  <!--</updateHandler>-->

4. To start Solr, from the example directory, execute:
   java -jar start.jar

   Or:
   java -jar -Djetty.port=443 start.jar (in some cases it might be necessary to use sudo to run this command)

5. (NOTE: need to minify and otherwise improve deployment.) If necessary, copy the web portal app directory PortalApp/ to the apache HTML directory. In Linux this usually is /var/www/html/. The PortalApp/ dir can be found at BITEME/WebPortal.

6. If necessary, change the settings in the file PortalApp/resources/config/settings.json.

7. Copy the .json file generated in step 2 to PortalApp/resources/config/fldmodel.json


8. See if it's working by opening localhost/PortalApp/index.html in a web browser.






Configuration:

The fldmodel.json file created in step 7 contains information about the fields selected for the portal. Each field has the following settings:

colname: The name of the column in the Specify cache.           DO NOT EDIT!
solrname: The name of the column in the Solr index.           DO NOT EDIT!
solrtype: the Solr data type.     DO NOT EDIT!
solrtitle: ?  DO NOT EDIT!
title: The title for the field displayed in column headers, forms, etc.        Optional
type: the data type. DO NOT EDIT!
width: the length of text fields. DO NOT EDIT!
concept: the name of the concept the field is mapped to.        Optional
concepturl: the concept's URL.         Optional
sptable: the name of the field's table in the Specify DB. DO NOT EDIT!
sptabletitle: the sptable's title.
spfld: the name of the field in the Specify database, DO NOT EDIT!
spfldtitle: the spfld's title.
spdescription: the spfld's description
colidx: the position of the field in the Specify cache. DO NOT EDIT!
advancedsearch: If this setting is true the field will be available in the advanced-search interface. (boolean, default: true)  Optional
displaycolidx:  the default initial position of the field in the results display table, and the detail form view.
displaywidth: the default initial width in pixels of the field in the results display table. (default: 100)    Optional
hiddenbydefault: If this setting is true then the field will not be initially displayed in the results view, though it can be made visible by clicking on a column header in the results view and choosing 'Columns'. type: 'boolean', default: false  Optional
treeid: For geographic or taxonomic data, this field holds the name of the tree.    DO NOT EDIT!
treerank: For geography or taxonomic data, this field holds the numeric rank of the field. DO NOT EDIT!


The settings.json file located in PortalApp/resources/config/ contains settings that configure the URLs, images, and layout of the web portal.

portalInstance: This uniquely identifies the instance of the portal.   DO NOT EDIT!
solrURL: The URK of the Solr server.
solrPort: The port the Solr server is using.
solrPageSize: The default initial results page size returned from Solr.
maxSolrPageSize: The highest page size allowable in the portal. Settings above 5000 can lead to very poor performance.
imageBaseUrl: The URL of the image server
imagePreviewSize: The height and width of the (square) images displayed in Image preview views. Default: 200 (In the file resources/css/thumb-view.css, the height and width for *.tv-thumb should be set to about 7 px greater than this setting.)
imageViewSize: The height and width of images in image view windows. Default: 500 (Set to -1 for actual size).
backgroundURL: The URL for the background image displayed for the app's entry screen. Default: resources/images/specify128.png
bannerURL: The URL for the image displayed in the upper left corner of the portal window.
bannerTitle: The title displayed above the banner image.
bannerHeight: the height of the banner image.
bannerWidth: the width of the banner image.
imageInfoFlds: the solrnames of the fields that are displayed when the mouse is moved over images in preview views. The fields are separated by spaces. In the portal, they are displayed on separate lines (one field to a line) ordered from top to bottom in the order listed.
topBranding: HTML describing customized area above the portal application window.
topHeight: height in pixels of the topBranding area.
topMarginLeft: CSS setting for topBranding content.
topMarginRight: CSS setting for topBranding content.
topWidth: width in pixels of topBranding content.
bottomBranding: HTML describing customized area below the portal application window.
bottomHeight: height in pixels of the bottomBranding area.
bottomMarginLeft: CSS setting for bottomBranding content.
bottomMarginRight: CSS setting for bottomBranding content.
bottomWidth: width in pixels of bottomBranding content.
displayImgCaption: when set to true, the fields (as configured in imageInfoFlds, see above) will render underneath preview views and the image detail view.


###################################################################
solr-3.5.0 setup instructions


    a) locate the example directory. e.g apache-solr-3.5.0/example

    b) remove all files from example/solr/data/index

    c) copy the files in the Solr directory generated in step 2 to example/solr/data/index

    d) open the file example/solr/conf/schema.xml and replace the fields in the <fields> block with the contents of the file SolrFldSchema.xml generated in step 2. Leave the <dynamicField> definition in the schema.xml file.

    e) in the schema.xml file of step d, edit the line <uniqueKey required="false">id</uniqueKey> to <uniqueKey>spid</uniqueKey>.

